QUESTION -4

input_list=[1,4,5,6,6,5,3,5,1,6,4,6]
input_list.sort(reverse=True)  # TO SORT IN DESCENDING ORDER 
dict1={}
requried_list=[]
for i in input_list:    # OBTAINING THE DICT WITH KEY VALUE PAIRS --> FREQUENCY OF GIVEN LIST.
    if i in dict1:
        dict1[i]+=1 
    else:
        dict1[i]=1 
print(dict1)

dict1={k:v for k,v in sorted(dict1.items(),key=lambda item:item[1])}  #SORTING THE DICT ACCORDING TO VALUES
print(dict1)
for k,v in dict1.items():
    for i in range(v):
        
        requried_list.append(k)   
requried_list.reverse()    # OBTAINING FREQUENCY IN DESCENDING ORDER OF ITS VALUE 
    
print(requried_list)
        
    
----------------------------------------------------------------------------------------------------       



QUESTION-1


def contiguous_order(list1):
    for i in range(1,len(list1)):       # FUNCTION THAT RETURNS THE LIST WHICH IS IN contiguous_order.
        if list1[i]-list1[i-1]>1:
            return False
        return True


input_list=['5C', '2D', '10C', '4S', '6S', '2H', '1S', '8D', '4C', '6C', '8H','5S', '1H', '3C']
colour_C=[]
colour_D=[]
colour_S=[]
colour_H=[]
print(input_list[0][1])
for i in range(len(input_list)):       # SEPERATE ALL FOUR COLOURS 
    if input_list[i][1]=='C':
        colour_C.append(input_list[i])
    if input_list[i][1]=='D':
        colour_D.append(input_list[i])
    if input_list[i][1]=='S':
        colour_S.append(input_list[i])
    if input_list[i][1]=='H':
        colour_H.append(input_list[i])
list_leng=[]        
order_C=list_leng.append(len(sorted(colour_C)))     #FINDING LENGTHS OF EACH ARRAY WHICH IS SORTED 
order_D=list_leng.append(len(sorted(colour_D)))
order_S=list_leng.append(len(sorted(colour_S)))
order_H=list_leng.append(len(sorted(colour_H)))

LIST=[]
LIST.append("sorted arrays of max LENGTHS")
for i in range(len(LIST)):        #IF THERE ARE MORE THAN ONE MAX ARRAY CHECK THE CONTIGUOUS ORDER OF IT AND RETURN THE TRUE ONE.
    #count of max ele>1:
        '''check contiguous_order of both lists
        then return which is in correct order 
       '''
    if contiguous_order(LIST[i]) :
        print(sorted(LIST[i])
    
------------------------------------------------------------------------------------------------------------       

QUESTION-6
input_string=["fdjkd","dfjdk","dfd","fdjkd","kkjjk"]

total_sum=0
left_hand='df'
right_hand='jk'

sum1=0

for i in range(len(input_string)):
    for j in range(len(input_string[i])):
        if i==0 and input_string[i][j] in left_hand or input_string[i][j] in right_hand:
            sum1+=0.2
            if input_string[i][j] in  left_hand:
               prev="left_hand"
            else:
               prev="right_hand"
        elif input_string[i][j] in right_hand and prev=="right_hand":   #checking whether charcter is in  right hand and same with previous one.
            sum1+=0.4
        elif  input_string[i][j] in left_hand and prev=="left_hand":    #checking whether charcter is in  left hand and same with previous one.
            sum1+=0.4 
        elif input_string[i][j]in right_hand and prev=="left_hand":     #checking whether charcter is in  right hand and different with previous one.
            sum1+=0.2
        elif input_string[i][j] in left_hand and prev=="right_hand":    #checking whether charcter is in  right hand and different with previous one.
            sum1+=0.2
    total_sum+=sum1      #sum of all individual strings

print(total_sum*4)
    
--------------------------------------------------------------------------------------


QUESTION-3

def remove1(str1):
    return str1.replace(" ","")


input_string='This is a sample string, where chars are rotated by 3 keys on right side.'.lower()
actual_str=remove1(input_string)
punchuations=[',','.','"',"'",'!','@']
keys_shift=3
rotated=1 #right
default_string="qwertyuiopasdfghjklzxcvbnm"
new_string=""
for i in actual_str:
    if rotated==1:            # following right shift if 1.
        if i in default_string:
            x=default_string.index(i)+3  # to shift by right -->taking the index of requried charcater and addig the keys that should be shifted .
            new_string+=default_string[x]  # adding charcter to the new string which is right shifted by 3.
        if i in punchuations:
            new_string+=i      #adding the same punchuations to the string.
    elif rotated==0:                   # # following left shift if 0.
        if i in default_string:
            y=default_string.index(i)-3  #to shift by left
            new_string+=default_string[y]
        if i in  punchuations:
             new_string+=i     #adding the same punchuations to the string.
            
            
            
print(new_string)